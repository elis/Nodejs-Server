var Underscore = require('underscore'),
	VM = require('vm'),
	Util = require('util'),
	File = require('fs'),
	Path = require('path');


/*88ba.88ba                 dP          dP          
88  `8b  `8b                88          88          
88   88   88 .d8888b. .d888b88 dP    dP 88 .d8888b. 
88   88   88 88'  `88 88'  `88 88    88 88 88ooood8 
88   88   88 88.  .88 88.  .88 88.  .88 88 88.  ... 
dP   dP   dP `88888P' `88888P8 `88888P' dP `88888P' 
                                                    
                                                                                                                                           
*/
var count = 0;
function C360Module (moduleName, req, res, C360) {
	if (this instanceof C360Module) return new C360Module(moduleName, req, res, C360);
	
	if (typeof moduleName != 'string' || moduleName.length < 1 || !C360.isModule(moduleName))
		return false;
	
	if (C360.modules.hasOwnProperty(moduleName))
		return C360.modules[moduleName];
	
	var moduleDir = C360.appPath + '/modules/' + moduleName,
		self = {
			id: moduleName,
			title: moduleName,
			links: false,
			path: moduleDir,
			baseURL: C360.appURL,
			cachePath: C360.cachePath,
			hasServer: C360.moduleHasServer(moduleName),
			hasClient: C360.moduleHasClient(moduleName),
			hasHTML: C360.moduleHasHTML(moduleName),
			hasSections: C360.moduleHasSections(moduleName)
		};
	
	self.sections = (function() {
		if (!self.hasSections)
			return false;
			
		var files = File.readdirSync(self.path + '/sections/'),
			i, sections = [];
		if (files) {
			for (i in files) {
				var file = files[i],
					ext = Path.extname(file);
				if (ext && ext == '.html' && C360.isFile(self.path + '/sections/' + file)) {
					sections.push(Path.basename(file, '.html'));
				}
			}
		}
		return sections;
	}());
	
	
	// Server Script Parsing
	if (self.hasServer) {
		var filename = self.path + '/server.js',
			sandbox = {
				Module: self,
				Util: Util,
				Cache: C360.Cache,
				Template: C360.loadHTML,
				errorPage: C360.errorPage,
				console: console,
				require: require,
				process: process,
				C360: C360
			};
		
		function loadServerScript (sandbox) {
			var serverScriptData = File.readFileSync(self.path + '/server.js');
			

			try {
				VM.runInNewContext(serverScriptData, sandbox);
				
				if (self.links) {
					var linkId;
					for (linkId in self.links) {
						var link = self.links[linkId];
						if (link.section) self.sections[linkId] = link;
					}
				}
			}
			catch (err) {
				var errorPhrase = "Error Parsing module server script" + 
					"\n	ModuleID: " + moduleName + 
					"\n	Exception Error: " + err;
				if (req && (!req.ended || !req.closed)) {
					if (global.serverConf.devMode)
						C360.errorPage(500.1, req, res, errorPhrase, true);
					else
						C360.errorPage(500, req, res);
				} else {
					C360.errorPage(500, req, res, err, true);
				}
				return false;
			}
		}
		
		/*
			Unsuppoerted on Windows
			Not tested on other platforms
			
			Node: v0.5.8
			Date: 1st Oct 2011
			
		File.watchFile(filename, {}, function (curr, prev) {
			console.log('Rerunning server script for module: ', moduleName);
			loadServerScript(sandbox);
		});
		*/
		
		loadServerScript(sandbox);
	}
	
	C360.modules[moduleName] = self;
	return self;
};

module.exports = C360Module;