// Template
var Path = require('path'),
	File = require('fs'),
	ejs = require('ejs');


/*
dP                         dP M""MMMMM""MM M""""""""M M"""""`'"""`YM M""MMMMMMMM 
88                         88 M  MMMMM  MM Mmmm  mmmM M  mm.  mm.  M M  MMMMMMMM 
88 .d8888b. .d8888b. .d888b88 M         `M MMMM  MMMM M  MMM  MMM  M M  MMMMMMMM 
88 88'  `88 88'  `88 88'  `88 M  MMMMM  MM MMMM  MMMM M  MMM  MMM  M M  MMMMMMMM 
88 88.  .88 88.  .88 88.  .88 M  MMMMM  MM MMMM  MMMM M  MMM  MMM  M M  MMMMMMMM 
dP `88888P' `88888P8 `88888P8 M  MMMMM  MM MMMM  MMMM M  MMM  MMM  M M         M 
                              MMMMMMMMMMMM MMMMMMMMMM MMMMMMMMMMMMMM MMMMMMMMMMM 
                                                                                 
loadHTML
Servers as a templating engine
	@param {string} the file to parse and return
	@param {object} simple key-value pairs object to use inside the template
	@return {string} parsed HTML or error message
*/	
function loadHTML (filename, vars, context) {
	var fileExists = Path.existsSync(filename);
	
	if (!fileExists)
		return 'File ' + filename + ' doesn\'t exists. Can\'t render';
	
	var file = File.statSync(filename);
	
	if (!file.isFile())
		return filename + ' is not a file';
	
	var raw = File.readFileSync(filename).toString();
	var options = {
		locals: vars || {},
		filename: filename,
		scope: context || {},
		open: '<?',
		close: '?>'
	};
	try {
		var html = ejs.render(raw, options);
	} catch (err) {
		console.log(err);
	}
	
	return html || null;
}


module.exports = loadHTML;